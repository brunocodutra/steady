$grid-breakpoints: (
  xs: 0,
  sm: 320px,
  md: 576px,
  lg: 768px,
  xl: 992px
);

@import '~bootstrap/scss/bootstrap';

$tile-size: 6rem;
$transition-duration: 150ms;

$highlight-color: #ffa500;
$highlight-color-800: rgba($highlight-color, .8);
$highlight-color-200: rgba($highlight-color, .2);

html,
body {
  @extend .d-flex;
  @extend .flex-column;
  @extend .h-100;

  @include media-breakpoint-down(sm) {
    line-height: 1;
  }

  @include media-breakpoint-up(md) {
    font-size: 14px;
  }

  @include media-breakpoint-up(lg) {
    font-size: 16px;
  }

  @include media-breakpoint-up(xl) {
    font-size: 18px;
  }

  font-size: 12px;
}

.flex-grow {
  flex-grow: 1;
}

svg {
  &.github {
    @include media-breakpoint-up(md) {
      width: 1.25rem;
      height: 1.25rem;
      vertical-align: text-bottom;
    }

    width: 2.5rem;
    height: 2.5rem;
    fill: currentcolor;
  }
}

.github-btn {
  width: 90px;
  height: 20px;
}

.copyright {
  @include media-breakpoint-up(md) {
    font-size: .9rem;
  }

  @include media-breakpoint-up(xl) {
    font-size: .8rem;
  }
}

.toolbar,
.schematics {
  @extend .d-flex;
  @extend .flex-grow;

  flex-basis: 0;
  font-size: 0;
  white-space: nowrap;
  overflow: auto;
}

.toolbar {
  .tool {
    @extend .p-1;
    @extend .rounded;

    position: relative;
    width: .75 * $tile-size;
    height: .75 * $tile-size;
    transition-duration: $transition-duration;
    transition-property: color, border-color;
    transition-timing-function: ease-in-out;
    border: 1px solid $border-color;
    cursor: pointer;

    &:hover,
    &:focus {
      border-color: $highlight-color-800;
      outline: none;
      color: $highlight-color;
    }

    +.tool {
      @extend .ml-1;
    }
  }
}

.schematics {
  .tile {
    display: inline-block;
    position: relative;
    width: $tile-size;
    height: $tile-size;
    transition: color ease-in-out $transition-duration;
    outline: none;
    vertical-align: top;

    &.connector::after {
      @extend .rounded;

      position: absolute;
      top: 10%;
      right: 10%;
      bottom: 10%;
      left: 10%;
      transition: border-color ease-in-out $transition-duration;
      border: .15rem dashed transparent;
      content: '';
    }

    &.ground {
      margin-left: -$tile-size;
    }

    &.series {
      margin-left: $tile-size;
    }

    &.shunt {
      @extend .d-flex;
      @extend .flex-column;

      height: auto;
      margin-bottom: -$tile-size;
    }

    &.interactive {
      cursor: pointer;
    }

    &.active,
    &.interactive:focus,
    &.interactive:hover {
      color: $highlight-color;
      filter: url('#glow');
    }

    &.active.connector::after,
    &.interactive.connector:focus::after,
    &.interactive.connector:hover::after {
      border-color: $highlight-color-800;
      filter: drop-shadow(0 0 .2rem $highlight-color-200);
    }

    &.active,
    &.active.connector::after {
      animation: blinking 1s ease-in-out infinite;
    }
  }
}

@keyframes blinking {
  50% {
    border-color: transparent;
    color: unset;
  }
}

.value {
  @extend .d-flex;
  @extend .text-muted;
  @extend .justify-content-center;

  position: absolute;
  right: 0;
  left: 0;

  font-size: .7rem;
  font-weight: bold;
  line-height: 1.2;

  .vsrc &,
  .impedance & {
    top: 40%;
  }

  .isrc &,
  .admittance &,
  .xformer & {
    top: 85%;
  }

  .line & {
    top: 80%;
  }
}

.phasor {
  .ang {
    &::before {
      content: '∠';
    }

    &::after {
      content: '°';
    }
  }
}

.unit {
  margin-left: .35em;

  &.volt::after {
    content: 'V';
  }

  &.ampere::after {
    content: 'A';
  }

  &.ohm::after {
    content: 'Ω';
  }

  &.ratio::after {
    content: ': 1';
  }
}

.prefix {
  margin: 0 -.35em 0 .35em;

  &.femto::after {
    content: 'f';
  }

  &.pico::after {
    content: 'p';
  }

  &.nano::after {
    content: 'n';
  }

  &.micro::after {
    content: 'μ';
  }

  &.milli::after {
    content: 'm';
  }

  &.kilo::after {
    content: 'k';
  }

  &.mega::after {
    content: 'M';
  }

  &.giga::after {
    content: 'G';
  }

  &.tera::after {
    content: 'T';
  }

  &.peta::after {
    content: 'P';
  }
}
